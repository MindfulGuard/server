// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: dynamic_configurations.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DynamicConfigurationsClient is the client API for DynamicConfigurations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicConfigurationsClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeleteTree(ctx context.Context, in *DeleteTreeRequest, opts ...grpc.CallOption) (*DeleteTreeResponse, error)
}

type dynamicConfigurationsClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicConfigurationsClient(cc grpc.ClientConnInterface) DynamicConfigurationsClient {
	return &dynamicConfigurationsClient{cc}
}

func (c *dynamicConfigurationsClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/dynamic_configurations.DynamicConfigurations/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConfigurationsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/dynamic_configurations.DynamicConfigurations/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConfigurationsClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/dynamic_configurations.DynamicConfigurations/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConfigurationsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/dynamic_configurations.DynamicConfigurations/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConfigurationsClient) DeleteTree(ctx context.Context, in *DeleteTreeRequest, opts ...grpc.CallOption) (*DeleteTreeResponse, error) {
	out := new(DeleteTreeResponse)
	err := c.cc.Invoke(ctx, "/dynamic_configurations.DynamicConfigurations/DeleteTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicConfigurationsServer is the server API for DynamicConfigurations service.
// All implementations must embed UnimplementedDynamicConfigurationsServer
// for forward compatibility
type DynamicConfigurationsServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	DeleteTree(context.Context, *DeleteTreeRequest) (*DeleteTreeResponse, error)
	mustEmbedUnimplementedDynamicConfigurationsServer()
}

// UnimplementedDynamicConfigurationsServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicConfigurationsServer struct {
}

func (UnimplementedDynamicConfigurationsServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDynamicConfigurationsServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDynamicConfigurationsServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDynamicConfigurationsServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDynamicConfigurationsServer) DeleteTree(context.Context, *DeleteTreeRequest) (*DeleteTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTree not implemented")
}
func (UnimplementedDynamicConfigurationsServer) mustEmbedUnimplementedDynamicConfigurationsServer() {}

// UnsafeDynamicConfigurationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicConfigurationsServer will
// result in compilation errors.
type UnsafeDynamicConfigurationsServer interface {
	mustEmbedUnimplementedDynamicConfigurationsServer()
}

func RegisterDynamicConfigurationsServer(s grpc.ServiceRegistrar, srv DynamicConfigurationsServer) {
	s.RegisterService(&DynamicConfigurations_ServiceDesc, srv)
}

func _DynamicConfigurations_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConfigurationsServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic_configurations.DynamicConfigurations/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConfigurationsServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConfigurations_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConfigurationsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic_configurations.DynamicConfigurations/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConfigurationsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConfigurations_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConfigurationsServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic_configurations.DynamicConfigurations/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConfigurationsServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConfigurations_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConfigurationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic_configurations.DynamicConfigurations/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConfigurationsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConfigurations_DeleteTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConfigurationsServer).DeleteTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic_configurations.DynamicConfigurations/DeleteTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConfigurationsServer).DeleteTree(ctx, req.(*DeleteTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicConfigurations_ServiceDesc is the grpc.ServiceDesc for DynamicConfigurations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicConfigurations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynamic_configurations.DynamicConfigurations",
	HandlerType: (*DynamicConfigurationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DynamicConfigurations_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DynamicConfigurations_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _DynamicConfigurations_GetList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DynamicConfigurations_Delete_Handler,
		},
		{
			MethodName: "DeleteTree",
			Handler:    _DynamicConfigurations_DeleteTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_configurations.proto",
}
