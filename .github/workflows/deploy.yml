name: CI-CD

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  code_analyzer:
    name: Code Analyzer (Python, PostgreSQL)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        architecture: 'x64'
    
    - name: Dependency installation
      run: |
        pip install pylint sqlfluff
        make pip-i

    - name: Starting the analyzer (Python)
      run: pylint --rcfile=.github/configs/pylintrc.ini setup.py mindfulguard tests routines
      continue-on-error: true

    - name: Starting the analyzer (PostgreSQL)
      run: sqlfluff lint --config .github/configs/sqlfluff.toml db/migrations/*.sql
      continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest

    env:
      admin_login: UserADmin12345_-
      admin_password: AdminPassword_-4234__-43223
      MINIO_HOSTNAME: http://localhost:9000
      minio_root_access_key: rootuser123
      minio_root_secret_key: rootpassword123
      MINIO_USER_ACCESS_KEY: useruser123
      MINIO_USER_SECRET_KEY: userpassword123
      POSTGRES_PORT: 5432
      POSTGRES_HOST: localhost
      POSTGRES_USER: mindfulguard
      POSTGRES_DB: mindfulguard_production
      POSTGRES_PASSWORD: mindfulguard_password
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_USERNAME: default
      REDIS_PASSWORD: userpassword
      REDIS_LD: 0

    services:
      postgresql:
        image: postgres:15.4
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
    steps:
      - uses: actions/checkout@v4

      - name: Run MinIO Server
        run: docker run -d --name minio -p 9000:9000 -v ~/minio/data:/data -e MINIO_ACCESS_KEY=${{env.minio_root_access_key}} -e MINIO_SECRET_KEY=${{env.minio_root_secret_key}} quay.io/minio/minio server /data --console-address ":9090"

      - name: Run Redis Server
        run: docker run -d --name redis -p 6379:6379 -v cache:/data -e REDIS_ARGS="--loglevel warning --requirepass ${{env.REDIS_PASSWORD}}" redis/redis-stack:latest

      - name: Install Migrate
        run: |
          sudo apt-get update

          curl -sSL https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.deb \
          --create-dirs -o /home/$USER/migrate.linux-amd64.deb && sudo dpkg -i /home/$USER/migrate.linux-amd64.deb

      - name: Database Initialization
        run: make migration-up
        env:
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          POSTGRES_HOST: ${{env.POSTGRES_HOST}}
          POSTGRES_PORT: ${{env.POSTGRES_PORT}}
          POSTGRES_DB: ${{env.POSTGRES_DB}}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Show Environment Variables
        run: |
          echo $admin_login
          echo $admin_password
          echo $MINIO_HOSTNAME
          echo $minio_root_access_key
          echo $minio_root_secret_key
          echo $MINIO_USER_ACCESS_KEY
          echo $MINIO_USER_SECRET_KEY
          echo $DATABASE_PORT
          echo $DATABASE_USER
          echo $DATABASE_PASSWORD

      - name: Installing dependencies
        run: |
          python -m pip install --upgrade pip
          make pip-i

      - name: Check if MinIO is running
        run: |
          timeout=15
          while ! curl http://localhost:9000 && [ $timeout -gt 0 ]; do
            echo "Waiting for MinIO to start..."
            sleep 5
            timeout=$((timeout-5))
          done
        
          if [ $timeout -le 0 ]; then
            echo "MinIO did not start within the specified timeout."
            exit 1
          fi

      - name: Initializing the administrator
        run: make -f build/Makefile init admin_login="${{env.admin_login}}" admin_password="${{env.admin_password}}" database_host="localhost" database_name=${{env.POSTGRES_DB}}"" database_port="5432" database_user="${{env.POSTGRES_USER}}" database_password="${{env.POSTGRES_PASSWORD}}" minio_hostname="${{env.MINIO_HOSTNAME}}" minio_root_access_key="${{env.minio_root_access_key}}" minio_root_secret_key="${{env.minio_root_secret_key}}" minio_user_access_key="${{env.MINIO_USER_ACCESS_KEY}}" minio_user_secret_key="${{env.MINIO_USER_SECRET_KEY}}"

      - name: Setup service "routines"
        run: |
          sudo chmod +x routines/setup_service.sh
          sudo ./routines/setup_service.sh
        env:
          POSTGRES_HOST: ${{env.POSTGRES_HOST}}
          POSTGRES_PORT: ${{env.POSTGRES_PORT}}
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}

      - name: Running Tests
        run: |
          make test
        env:
          POSTGRES_HOST: ${{env.POSTGRES_HOST}}
          POSTGRES_PORT: ${{env.POSTGRES_PORT}}
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          MINIO_HOSTNAME: ${{env.MINIO_HOSTNAME}}
          MINIO_ROOT_USER: ${{env.MINIO_ROOT_USER}}
          MINIO_ROOT_PASSWORD: ${{env.MINIO_ROOT_PASSWORD}}
          MINIO_USER_ACCESS_KEY: ${{env.MINIO_USER_ACCESS_KEY}}
          MINIO_USER_SECRET_KEY: ${{env.MINIO_USER_SECRET_KEY}}
          REDIS_PASSWORD: ${{env.REDIS_PASSWORD}}
          REDIS_HOST: ${{env.REDIS_HOST}}
          REDIS_PORT: ${{env.REDIS_PORT}}
          REDIS_USERNAME: ${{env.REDIS_USERNAME}}
          REDIS_LD: ${{env.REDIS_LD}}
      
      - name: Copying logs
        run: |
          mkdir test_logs
          cp -r tests/.logs/* test_logs/

      - uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: test_logs

  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    if: ${{ needs.test.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Updating
        run: |
          sudo apt-get update

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.ACTIONS }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
      
      - name: Convert repository owner to lowercase
        id: repo_nameLC
        run: |
          echo "variable=${{ github.repository }}" | tr '[:upper:]' '[:lower:]' >> "$GITHUB_OUTPUT" 
      
      - name: Build and Push Docker Container
        run: |
          branch_name=$(echo ${{ github.ref }} | sed 's|refs/heads/||' | tr '[:upper:]' '[:lower:]')
          echo "Branch name is $branch_name"
          docker buildx build --push --platform linux/amd64 -t ghcr.io/${{ steps.repo_nameLC.outputs.variable }}:${branch_name} .

  release:
    name: Create Release
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ needs.deploy.result == 'success' }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get branch name
      id: branch_name
      run: echo ::set-output name=branch::$(echo $GITHUB_REF | awk -F'/' '{print $3}')

    - name: Create release directory
      run: |
        mkdir build-release
        cp -r build build-release/
        cp -r docker build-release/
        tar -czvf build-release.tar.gz build-release
      working-directory: ${{ github.workspace }}

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: build-release.tar.gz
        tag_name: ${{ steps.branch_name.outputs.branch }}
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS }}